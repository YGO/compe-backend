service: livescore

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-webpack

custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs4.3
  environment:
    COMPETITIONS_TABLE:  ${self:service}-competitions-${opt:stage, self:provider.stage}
    PLAYERS_TABLE:  ${self:service}-players-${opt:stage, self:provider.stage}
    ROUNDS_TABLE:  ${self:service}-rounds-${opt:stage, self:provider.stage}
    ROUND_ENTRIES_TABLE:  ${self:service}-round_entries-${opt:stage, self:provider.stage}
    SCORES_TABLE:  ${self:service}-scores-${opt:stage, self:provider.stage}
    ENTRIES_TABLE:  ${self:service}-entries-${opt:stage, self:provider.stage}
    HOLES_TABLE:  ${self:service}-holes-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:BatchGetItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMPETITIONS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PLAYERS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ROUNDS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ROUND_ENTRIES_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SCORES_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ENTRIES_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.HOLES_TABLE}"
functions:
  CompetitionGet:
    handler: competitions/get.get
    events:
      - http:
          path: competitions/{id}
          method: get
          cors: true

  CompetitionUpdate:
    handler: competitions/update.update
    events:
      - http:
          path: competitions/{id}/players/{playerid}
          method: put
          cors: true

  ScoreUpdate:
    handler: scores/update.update
    events:
      - http:
          path: scores/{id}
          method: put
          cors: true

resources:
  Resources:
    CompetitionsDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.COMPETITIONS_TABLE}

    PlayersDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PLAYERS_TABLE}

    RoundsDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: competition_id
            AttributeType: S
          - AttributeName: play_order
            AttributeType: N
        KeySchema:
          - AttributeName: competition_id
            KeyType: HASH
          - AttributeName: play_order
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ROUNDS_TABLE}

    RoundEntriesDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ROUND_ENTRIES_TABLE}

    EntriesDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - AttributeName: competition_id
          AttributeType: S
        - AttributeName: player_id
          AttributeType: S
        KeySchema:
        - AttributeName: competition_id
          KeyType: HASH
        - AttributeName: player_id
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ENTRIES_TABLE}

    ScoresDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.SCORES_TABLE}

    HolesDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - AttributeName: competition_id
          AttributeType: S
        - AttributeName: hole_num
          AttributeType: N
        KeySchema:
        - AttributeName: competition_id
          KeyType: HASH
        - AttributeName: hole_num
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.HOLES_TABLE}