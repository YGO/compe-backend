service: competitions

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs4.3
  environment:
    COMPETITIONS_TABLE: competitions-${opt:stage, self:provider.stage}
    PLAYERS_TABLE: players-${opt:stage, self:provider.stage}
    ROUNDS_TABLE: rounds-${opt:stage, self:provider.stage}
    ROUND_ENTRIES_TABLE: round-entries-${opt:stage, self:provider.stage}
    SCORES_TABLE: scores-${opt:stage, self:provider.stage}
    ENTRIES_TABLE: entries-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMPETITIONS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PLAYERS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ROUNDS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ROUNDS_TABLE}/index/rounds-index"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ROUND_ENTRIES_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ROUND_ENTRIES_TABLE}/index/round-entries-index"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SCORES_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SCORES_TABLE}/index/scores-index"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ENTRIES_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ENTRIES_TABLE}/index/entries-index"

functions:
  CompetitionGet:
    handler: competitions/get.get
    events:
      - http:
          path: competitions/{id}
          method: get
          cors: true

  CompetitionUpdate:
    handler: competitions/update.update
    events:
      - http:
          path: competitions/{id}/players/{playerid}
          method: put
          cors: true

  ScoresUpdate:
    handler: scores/update.update
    events:
      - http:
          path: scores/{id}
          method: put
          cors: true

resources:
  Resources:
    CompetitionsDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.COMPETITIONS_TABLE}

    PlayersDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PLAYERS_TABLE}

    RoundsDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: competition_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
        - IndexName: rounds-index
          KeySchema:
          - AttributeName: competition_id
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ROUNDS_TABLE}

    RoundEntriesDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: round_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
        - IndexName: round-entries-index
          KeySchema:
          - AttributeName: round_id
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ROUND_ENTRIES_TABLE}

    EntriesDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: competition_id
          AttributeType: S
        - AttributeName: player_id
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        GlobalSecondaryIndexes:
        - IndexName: entries-index
          KeySchema:
            - AttributeName: competition_id
              KeyType: HASH
            - AttributeName: player_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ENTRIES_TABLE}

    ScoresDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: round_entry_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
        - IndexName: scores-index
          KeySchema:
          - AttributeName: round_entry_id
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.SCORES_TABLE}
